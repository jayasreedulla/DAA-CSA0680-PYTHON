from itertools import combinations
import bisect
def generate_subsets(arr):
    subsets = []
    for r in range(len(arr) + 1):
        for combo in combinations(arr, r):
            subsets.append(sum(combo))
    return subsets
def meet_in_the_middle(arr, target):
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]
    left_sums = generate_subsets(left_half)
    right_sums = generate_subsets(right_half)
    right_sums.sort()
    closest_sum = float('inf')
    closest_diff = float('inf')
    for left_sum in left_sums:
        pos = bisect.bisect_left(right_sums, target - left_sum)
        if pos < len(right_sums):
            current_sum = left_sum + right_sums[pos]
            current_diff = abs(current_sum - target)
            if current_diff < closest_diff:
                closest_diff = current_diff
                closest_sum = current_sum
        if pos > 0:
            current_sum = left_sum + right_sums[pos - 1]
            current_diff = abs(current_sum - target)
            if current_diff < closest_diff:
                closest_diff = current_diff
                closest_sum = current_sum
    return closest_sum
arr = [45, 34, 4, 12, 5, 2]
target = 42
print(meet_in_the_middle(arr, target))  
